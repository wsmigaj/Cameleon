name: Tagged release

on:
  push:
    tags: 
    - "v*"

jobs:
  build-test-and-pack:
    runs-on: ${{ matrix.os }}
    
    permissions:
      # Give the job read-only access to the repository.
      contents: read
      # Allow the job to upload test results.
      checks: write

    strategy:
      fail-fast: false

      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [RelWithDebInfo]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            system_name: win64
            cpack_generator: ZIP
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: cc
            cpp_compiler: c++
            system_name: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version:      6.2.*
        setup-python: true
        cache: true

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        build_output_dir='${{ github.workspace }}/build'
        build_output_dir_with_fwd_slashes=${build_output_dir//\\//}
        install_dir='${{ github.workspace }}/install'
        echo "build-output-dir=${build_output_dir}" >> "$GITHUB_OUTPUT"
        echo "build-output-dir-with-fwd-slashes=${build_output_dir_with_fwd_slashes}" >> "$GITHUB_OUTPUT"
        echo "install-dir=${install_dir}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
        -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.install-dir }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      run: ctest --build-config ${{ matrix.build_type }} -VV
      working-directory: ${{ steps.strings.outputs.build-output-dir }}      

    - name: Upload test reports
      uses: mikepenz/action-junit-report@v4
      if: success() || failure()
      with:
        report_paths: '${{ steps.strings.outputs.build-output-dir }}/test/Test*.xml'
        check_name: 'CMake test report (${{ matrix.os }})'
          
    - name: (Windows) Create package
      if: ${{ matrix.os == 'windows-latest' }}
      run: >
        cpack 
        -G ${{ matrix.cpack_generator }}        
        --config "${{ steps.strings.outputs.build-output-dir }}\CPackConfig.cmake"
        -C ${{ matrix.build_type }} 
        -B "${{ steps.strings.outputs.build-output-dir }}"         
        -D CPACK_PACKAGE_FILE_NAME=Cameleon-${{ github.ref_name }}-${{ matrix.system_name }}

    - name: (Windows) Uncompress package
      if: ${{ matrix.os == 'windows-latest' }}
      shell: cmake -P {0}
      run: | 
        set(input_path "${{ steps.strings.outputs.build-output-dir-with-fwd-slashes }}/Cameleon-${{ github.ref_name }}-${{ matrix.system_name }}.zip")
        set(destination_path "${{ steps.strings.outputs.build-output-dir-with-fwd-slashes }}/package-contents")
        file(GLOB input_paths LIST_DIRECTORIES false ${input_path_pattern})
        file(ARCHIVE_EXTRACT INPUT "${input_path}" DESTINATION "${destination_path}" VERBOSE)
      
    - name: (Windows) Upload package
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-artifact@v4
      with:
        name: Cameleon-${{ github.ref_name }}-${{ matrix.system_name }}
        path: "${{ steps.strings.outputs.build-output-dir }}/package-contents/Cameleon-${{ github.ref_name }}-${{ matrix.system_name }}"
        if-no-files-found: error

    - name: (Windows) Upload PDB file
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-artifact@v4
      with:
        name: Cameleon-pdbs-${{ github.ref_name }}-${{ matrix.system_name }}
        path: "${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/Cameleon.pdb"
        if-no-files-found: error
      
    - name: (macOS) Create DMG file
      if: ${{ matrix.os == 'macos-latest' }}
      run: cmake --build . --config ${{ matrix.build_type }} --target install
      working-directory: ${{ steps.strings.outputs.build-output-dir }}      

    - name: (macOS) Upload DMG file
      if: ${{ matrix.os == 'macos-latest' }}
      uses: actions/upload-artifact@v4
      with:
        name: Cameleon-${{ github.ref_name }}-${{ matrix.system_name }}.dmg
        path: "${{ steps.strings.outputs.install-dir }}/Cameleon.dmg"
        if-no-files-found: error

  create-release:
    runs-on: ubuntu-latest
    needs: build-test-and-pack
    
    permissions:
      # Allow the job to create a release.
      contents: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4

    - name: Create release artifacts
      run: |
        zip Cameleon-${{ github.ref_name }}-win64.zip -r Cameleon-${{ github.ref_name }}-win64
        zip -j Cameleon-pdbs-${{ github.ref_name }}-win64.zip Cameleon-pdbs-${{ github.ref_name }}-win64/Cameleon.pdb
        mv Cameleon-${{ github.ref_name }}-macos.dmg Cameleon-${{ github.ref_name }}-macos
        mv Cameleon-${{ github.ref_name }}-macos/Cameleon.dmg Cameleon-${{ github.ref_name }}-macos/Cameleon-${{ github.ref_name }}-macos.dmg
        ls -R

    - name: Create release
      uses: ncipollo/release-action@v1.14.0 
      with:
        artifacts: "Cameleon-${{ github.ref_name }}-win64.zip,Cameleon-pdbs-${{ github.ref_name }}-win64.zip,Cameleon-${{ github.ref_name }}-macos/Cameleon-${{ github.ref_name }}-macos.dmg"
        draft: true
